#!/usr/bin/env bash

set -euo pipefail

dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "$dir"

if [ "${1:-}" == "--help" ] || [ "${1:-}" == "-h" ]; then
  echo "Micro-benchmarks for gfx_glyph"
  echo "  Setup a control / starting values to compare against"
  echo "  > ./bench --control"
  echo ''
  echo '  With a control recorded, re-evaluate and compare:'
  echo '  > ./bench'
  echo ''
  echo '  Can also add cargo-benchcmp arguments to change the comparison output'
  echo '  > ./bench --threshold 2'
  exit 0
fi

# number of repeats to make picking the best score
runs=3

# @arg filename of output
function bench_to {
  file=$1
  echo '' > "$file"

  for run in $(seq 1 $runs); do
    echo -e "\\e[33mrunning bench > $file ($run/${runs}: pick best result)\\e[39m" >&2
    cargo +nightly bench --features bench \
      | tee -a "$file" \
      | grep --color=never 'bench:'

    if [ "$run" != "1" ]; then
      # sort scores (with best at top) & remove each 2nd line (the worse one)
      grep 'bench:' "$file" \
        | grep -v 'ignored' \
        | sort \
        | awk "NR % 2" > benches/tmp
      mv benches/tmp "$file"
    fi
  done
}

if [ "${1:-}" == "--control" ]; then
  bench_to benches/control.stdout
  exit 0
fi

if [ ! -f benches/control.stdout ]; then
  echo 'benches/control.stdout missing, will not perform a benchmark comparison' >&2
  echo "  run \`./bench --control\` to generate from the current source" >&2
  # just run a bench
  cargo +nightly bench --features bench
else
  bench_to  benches/change.stdout
  echo ''
  cargo benchcmp benches/control.stdout benches/change.stdout "$@"
fi
